


db.accounts.find( { products : { $elemMatch : { $eq : "CurrencyService" } } } )

### Finding Documents by Using Logical Operators ###

Review the following logical operators: implicit $and, $or, and $and.
Find a Document by Using Implicit $and

Use implicit $and to select documents that match multiple expressions. For example:

db.routes.find({ "airline.name": "Southwest Airlines", stops: { $gte: 1 } })

Find a Document by Using the $or Operator

Use the $or operator to select documents that match at least one of the included expressions. For example:

db.routes.find({
  $or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }],
})

Find a Document by Using the $and Operator

Use the $and operator to use multiple $or expressions in your query.

db.routes.find({
  $and: [
    { $or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }] },
    { $or: [{ "airline.name": "American Airlines" }, { airplane: 320 }] },
  ]
})


### ADVANCED FIND ###

db.sales.find({ purchaseMethod: "Online", couponUsed: true, "customer.age" : { $lte: 25 } } )


### Replacing a document  ###

db.books.replaceOne(filter, replacement document, options)

db.books.replaceOne(
  {
    _id: ObjectId("6282afeb441a74a98dbbec4e"),
  },
  {
    title: "Data Science Fundamentals for Python and MongoDB",
    isbn: "1484235967",
    publishedDate: new Date("2018-5-10"),
    thumbnailUrl:
      "https://m.media-amazon.com/images/I/71opmUBc2wL._AC_UY218_.jpg",
    authors: ["David Paper"],
    categories: ["Data Science"],
  }
)


### Updating a document ###

db.books.updateOne(filter, document, options)
db.books.updateMany(filter, document, options)

$set - set or replace attribute value
$push - add to array or set as array
     $each - add array elements to another array
$pop - 
$unset -
$inc - use to increment a filed by the value specific

options
upsert - update a document if a match is found, else create a document

### UPDATE ONE ###

$set
db.podcasts.updateOne( { 
    _id: ObjectId("5e8f8f8f8f8f8f8f8f8f8f8"),
  },
  {
    $set: {
      subscribers: 98562,
    },
  }
)

upsert
db.podcasts.updateOne(
  { title: "The Developer Hub" },
  { $set: { topics: ["databases", "MongoDB"] } },
  { upsert: true }
)

$push
db.podcasts.updateOne(
  { _id: ObjectId("5e8f8f8f8f8f8f8f8f8f8f8") },
  { $push: { hosts: "Nic Raboy" } }
)

$each
db.birds.updateOne(
  { _id: ObjectId("6268471e613e55b82d7065d7") },
  {
    $push: {
      diet: { $each: ["newts", "opossum", "skunks", "squirrels"] },
    },
  }
)


$inc
db.birds.updateOne(
  { _id: ObjectId("6268471e613e55b82d7065d7") },
  {
    $inc : 
    { sightings : 1 },
  }
)

### UPDATE MANY ###

db.books.updateMany(
  { publishedDate: { $lt: new Date("2019-01-01") } },
  { $set: { status: "LEGACY" } }
)

db.birds.updateMany(
  { common_name : { $in : ["Blue Jay" , "Robin Redbreast"] } },
  { $set: { last_seen: ISODate("2022-01-01"} }
)

### findAndModify ###
Used to do an updateOne and findOne at the same time.

db.podcasts.findAndModify({
  query: { _id: ObjectId("6261a92dfee1ff300dc80bf1") },
  update: { $inc: { subscribers: 1 } },
  new: true,
})


### DELETING DOCUMENTS ###

db.books.deleteOne(filter, options)
db.books.deleteMany(filter, options)

db.podcasts.deleteOne({ _id: Objectid("6282c9862acb966e76bbf20a") })
db.podcasts.deleteMany({category: “crime”})
db.birds.deleteMany( { sightings_count : { $lte : 10 } } )


### QUERYING DATABASES ###

// Return data on all music companies, sorted alphabetically from A to Z.
db.companies.find({ category_code: "music" }).sort({ name: 1 });

// Return data on all music companies, sorted alphabetically from A to Z. Ensure consistent sort order
db.companies.find({ category_code: "music" }).sort({ name: 1, _id: 1 });

// Return the three music companies with the highest number of employees. Ensure consistent sort order.
db.companies
  .find({ category_code: "music" }, {name:1, number_of_employees:1))
  .sort({ number_of_employees: -1, _id: 1 })
  .limit(3);

db.sales.find({ "items.name": { $in: ["laptop", "backpack", "printer paper"] }, "storeLocation": "London", }).sort({ saleDate: -1, }).limit(3)


### PROJECTION ###

// Return all restaurant inspections - business name, result, and _id fields only
db.inspections.find(
  { sector: "Restaurant - 818" },
  { business_name: 1, result: 1 }
)

// Return all inspections with result of "Pass" or "Warning" - exclude date and zip code
db.inspections.find(
  { result: { $in: ["Pass", "Warning"] } },
  { date: 0, "address.zip": 0 }
)

// Return all restaurant inspections - business name and result fields only
db.inspections.find(
  { sector: "Restaurant - 818" },
  { business_name: 1, result: 1, _id: 0 }
)

db.sales.find( { "customer.age" : { $lt :30 }, "customer.satisfaction" : { $gt : 3 } }, { "customer.age":1, "customer.satisfaction":1, saleDate:1, storeLocation:1, _id:0 } )


### COUNT DOCUMENTS ###

// Count number of docs in trip collection
db.trips.countDocuments({})

// Count number of trips over 120 minutes by subscribers
db.trips.countDocuments({ tripduration: { $gt: 120 }, usertype: "Subscriber" })


db.sales.countDocuments({ items: { $elemMatch: { name: "laptop", price: { $lt: 600 } } } } )



### AGGREGATION ###

## $match ##

The $match stage filters for documents that match specified conditions. Here's the code for $match:

{
  $match: {
     "field_name": "value"
  }
}

## $group ##

The $group stage groups documents by a group key.

{
  $group:
    {
      _id: <expression>, // Group key
      <field>: { <accumulator> : <expression> }
    }
 }

## $match and $group in an Aggregation Pipeline ##

The following aggregation pipeline finds the documents with a field named "state" that matches a value "CA" and then groups those documents by the group key "$city" and shows the total number of zip codes in the state of California.

db.zips.aggregate([
{   
   $match: { 
      state: "CA"
    }
},
{
   $group: {
      _id: "$city",
      totalZips: { $count : { } }
   }
}
])

db.sightings.aggregate([
  {
    $match: {
        species_common: 'Eastern Bluebird'
    }
  }, {
    $group: {
        _id: '$location.coordinates',
        number_of_sightings: {
            $count: {}
        }
    }
  }
])


## $sort ##

The $sort stage sorts all input documents and returns them to the pipeline in sorted order. We use 1 to represent ascending order, and -1 to represent descending order.

{
    $sort: {
        "field_name": 1
    }
}


## $limit ##

The $limit stage returns only a specified number of records.

{
  $limit: 5
}


## $sort and $limit in an Aggregation Pipeline ##

The following aggregation pipeline sorts the documents in descending order, so the documents with the greatest pop value appear first, and limits the output to only the first five documents after sorting.

db.zips.aggregate([
{
  $sort: {
    pop: -1
  }
},
{
  $limit:  5
}
])



## $project ##

The $project stage specifies the fields of the output documents. 1 means that the field should be included, and 0 means that the field should be supressed. The field can also be assigned a new value.

{
    $project: {
        state:1, 
        zip:1,
        population:"$pop",
        _id:0
    }
}

## $set ##

The $set stage creates new fields or changes the value of existing fields, and then outputs the documents with the new fields.

{
    $set: {
        place: {
            $concat:["$city",",","$state"]
        },
        pop:10000
     }
  }

## $count ##

The $count stage creates a new document, with the number of documents at that stage in the aggregation pipeline assigned to the specified field name.

{
  $count: "total_zips"
}


db.sightings.aggregate([
{
  $match: {
    date: {
      $gt: ISODate('2022-01-01T00:00:00.000Z'),
      $lt: ISODate('2023-01-01T00:00:00.000Z')
    },
    species_common: 'Eastern Bluebird'
  }
}, {
  $count: 'bluebird_sightings_2022'
}
])


## $out ##

{ $out: "<output-collection>" } // Output collection is in the same database
{ $out: { db: "<output-db>", coll: "<output-collection>" } }

https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/?_ga=2.41101089.2049186481.1681934610-634481185.1681067074


#### INDEXING ####

### Create a Single Field Index ###

Use createIndex() to create a new index in a collection. Within the parentheses of createIndex(), include an object that contains the field and sort order.

db.customers.createIndex({
  birthdate: 1
})


### Create a Unique Single Field Index ###

Add {unique:true} as a second, optional, parameter in createIndex() to force uniqueness in the index field values. Once the unique index is created, any inserts or updates including duplicated values in the collection for the index field/s will fail.

db.customers.createIndex({
  email: 1
},
{
  unique:true
})

MongoDB only creates the unique index if there is no duplication in the field values for the index field/s.

### View the Indexes used in a Collection ###

Use getIndexes() to see all the indexes created in a collection.

db.customers.getIndexes()


### Check if an index is being used on a query ###

Use explain() in a collection when running a query to see the Execution plan. This plan provides the details of the execution stages (IXSCAN , COLLSCAN, FETCH, SORT, etc.).

    The IXSCAN stage indicates the query is using an index and what index is being selected.
    The COLLSCAN stage indicates a collection scan is perform, not using any indexes.
    The FETCH stage indicates documents are being read from the collection.
    The SORT stage indicates documents are being sorted in memory.

db.customers.explain().find({
  birthdate: {
    $gt:ISODate("1995-08-01")
    }
  })

db.customers.explain().find({
  birthdate: {
    $gt:ISODate("1995-08-01")
    }
  }).sort({
    email:1
    })


### Create a Compound Index ###

Use createIndex() to create a new index in a collection. Within the parentheses of createIndex(), include an object that contains two or more fields and their sort order.

db.customers.createIndex({
  active:1, 
  birthdate:-1,
  name:1
})


### Order of Fields in a Compound Index ###

The order of the fields matters when creating the index and the sort order. It is recommended to list the fields in the following order: Equality, Sort, and Range.

    Equality: field/s that matches on a single field value in a query
    Sort: field/s that orders the results by in a query
    Range: field/s that the query filter in a range of valid values

The following query includes an equality match on the active field, a sort on birthday (descending) and name (ascending), and a range query on birthday too.

db.customers.find({
  birthdate: {
    $gte:ISODate("1977-01-01")
    },
    active:true
    }).sort({
      birthdate:-1, 
      name:1
      })

Here's an example of an efficient index for this query:

db.customers.createIndex({
  active:1, 
  birthdate:-1,
  name:1
})


### Delete an Index ###

Use dropIndex() to delete an existing index from a collection. Within the parentheses of dropIndex(), include an object representing the index key or provide the index name as a string.

Delete index by name:

db.customers.dropIndex(
  'active_1_birthdate_-1_name_1'
)

Delete index by key:

db.customers.dropIndex({
  active:1,
  birthdate:-1, 
  name:1
})


### Delete Indexes ###

Use dropIndexes() to delete all the indexes from a collection, with the exception of the default index on _id.

db.customers.dropIndexes()

The dropIndexes() command also can accept an array of index names as a parameter to delete a specific list of indexes.

db.collection.dropIndexes([
  'index1name', 'index2name', 'index3name'
  ])


### Hide Index ### 

The hideIndex() command hides an index. Deleting an index that is the only index supporting a query will affect the performance of that query. You should hide the index before deleting it. This way, you'll be able to assess the impact of removing the index on query performance. MongoDB does not use hidden indexes in queries but continues to update their keys. This allows you to assess if removing the index affects the performance and unhide the index if needed. Unhiding an index is faster than recreating it.



#### Search Indexes ####

### Create search index ###

atlas clusters search indexes create --clusterName myAtlasClusterEDU -f /app/search_index.json


### Verify search indexes ###

atlas clusters search indexes list --clusterName myAtlasClusterEDU --db sample_supplies --collection sales


db.sales.aggregate([
  {
    $search: {
      index: 'sample_supplies-sales-dynamic',
      text: {
        query: 'notepad', path: { 'wildcard': '*' }
      } } },
  {
    $set: {
      score: { $meta: "searchScore" }
      }
  }
])




db.sales.aggregate([
  {
    $search: {
      index: 'sample_supplies-sales-static',
      text: {
        query: 'London', path: { 'wildcard': '*' }
      } } },
  {
    $set: {
      score: { $meta: "searchScore" }
      }
  }
])
